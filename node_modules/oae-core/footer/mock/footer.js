
define(function(require) {

  var footer = require('widget!footer');

  describe('Footer Widget', function(){

    describe('Manifest', function(){
      it('should exist', function(){
        footer.manifest.should.be.ok;
      })
      it('should not be empty', function(){
        footer.manifest.should.not.be.empty;
      })
      it('should include a URL for the HTML template', function(){
        footer.manifest.src.should.be.ok;
      })
    })

    describe('HTML Template', function(){
      it('should exist', function(){
        footer.html.should.be.ok;
      })
      it('should not be empty', function(){
        footer.html.should.not.be.empty;
      })
      it('should include exactly one CSS style sheet', function(){
        footer.cssStyleSheets.should.have.length.of(1);
      })
      it('should include exactly one external JavaScript file', function(){
        footer.jsScripts.should.have.length.of(1);
      })
    })

    describe('CSS Style Sheet', function(){
      it('should not be empty', function(){
        footer.cssStyleSheets[0].content.should.not.be.empty;
      })
      describe('Formatting', function(){
        it('should Use space before opening brace', function(){
          /[a-zA-Z0-9]+\{/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put opening brace on selector line', function(){
          /^\s*\{/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put expression on a new line', function(){
          /\{.+/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Expression has an ending semicolon', function(){
          /\n [^\*].*:.*[^;{\/\*]\n/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put close brace on a new line', function(){
          /\S+\}/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put space after expression colon', function(){
          /(\{|;)\s*\n\s+[\S]+:[\S]+/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put only one space after expression colon', function(){
          /(\{|;)\s*\n\s+[\S]+:  +/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Put only one space after expression colon', function(){
          /\;.+:.*;?/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
        it('should Indent expression 4 spaces', function(){
          /(\{|;)\s*\n[a-z-A-Z0-9]+/gm.test(footer.cssStyleSheets[0].content).should.be.false;
        })
      })
    })

    describe('JavaScript Module', function(){
      it('should not be empty', function(){
        footer.jsScripts[0].content.should.not.be.empty;
      })
      it('should return a function', function() {
        footer.jsScripts[0].content.should.be.a('function');
      })
      describe('Formatting', function(){
        it('should have no console.(log|warn|error|debug|trace) statements', function(){
          /console\.(?:log|warn|error|debug|trace)/g.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should have no alert() calls', function(){
          /alert\([.\s\S]*\)/g.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should have no double quotation marks other than within single quotation marks', function(){
          /(?!\'.*)\".*\"(?!.*')/gm.test(footer.jsFiles[0].content).should.be.true;
        })
        it('should use \"var <functionName> = function() {\"', function(){
          /^\s*function\s.*/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should put opening braces on the same line as the statement', function(){
          /\)\s*$(\n|\r)^\s*\{.*/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use exactly one space before an opening brace', function(){
          /.+\)(\s{0}|\s{2,})\{/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should not put whitespace after an opening brace', function(){
          /.*\).*\{( |\t)+(\n|\r)/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should not put whitespace after a closing brace', function(){
          /.*\}( |\t)+(\n|\r)/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use literal notation', function(){
          /new\s+(Object|Array|Number|String|Boolean).*/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use \"===\" instead of \"==\"', function(){
          /[^=!]==[^=]/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use \"!==\" instead of \"!=\"', function(){
          /!=[^=]/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use \"var <ALLCAPS>\" instead of \"const\"', function(){
          /^\s*const\s/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use \".on()\" and \".off()\" to attach event handlers', function(){
          /\.(live|die|bind|unbind)\(/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should not extend prototypes', function(){
          /\.prototype\..*=/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it.skip('should avoid using Object.freeze, Object.preventExtensions, Object.seal, with, eval', function(){
          /(^|\s)(Object\.(freeze|preventExtensions|seal)|eval|((?!['"].*)(with)(?!.*['"])))(\s|$)/gm.test(footer.jsFiles[0].content).should.be.false;
        })
        it('should use jquery or underscore for type checking', function(){
          /(^|\s)typeof(\s|$)/gm.test(footer.jsFiles[0].content).should.be.false;
        })
      })
    })

    describe('Static Rendering', function() {
      beforeEach(function() {
        footer.load();
      })
      afterEach(function() {
        footer.unload();
      })

      // Note: These tests are copied from the casperjs functional
      // tests residing (as of this writing) in a pull request.
      // For reference, here are the original tests, reformatted
      // slightly to shorten line lengths:
      //
      //     var verifyFooter = function() {
      //         // Verify that the footer exists on the page
      //         casper.test.assertExists(
      //             '#footer-container',
      //             'The footer exists on the page'
      //         );
      //         // Verify that the footer has a link
      //         casper.test.assertExists(
      //             '#footer-container a[href="http://apereo.org/"]',
      //             'The footer has a link to the Apereo website'
      //         );
      //         // Verify that the footer link opens in a new tab
      //         casper.test.assertExists(
      //             '#footer-container a[href="http://apereo.org/"][target="_blank"]',
      //             'The footer link opens in a new tab'
      //         );
      //     };

      it('should insert a footer container on the page', function() {
        $('#footer-container').should.exist;
      })
      it('should include a link to the Apero website', function() {
        $('#footer-container a[href="http://apereo.org/"]').should.exist;
      })
      it('should open link in new window/tab', function() {
        $('#footer-container a[href="http://apereo.org/"][target="_blank"]').should.exist;
      })
    })

    describe('JavaScript Execution', function() {
      beforeEach(function() {
        footer.load();
      })
      afterEach(function() {
        footer.unload();
      })
      it('should insert current year in copyright notice', function() {
        $('#footer-date').should.have.text(new Date().getFullYear().toString());
      })
    })

  })
});

